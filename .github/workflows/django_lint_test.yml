name: Django Test with Ruff Linting

on:
  pull_request:
    branches:
      - main
      - '**'

permissions:
  contents: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --user pipx
          python -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install poetry
          poetry install

      - name: Run Ruff Linter
        run: |
            poetry run ruff check .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}" >> .env
          echo "MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "MINIO_STORAGE_HOST=${{ secrets.MINIO_STORAGE_HOST }}" >> .env
          echo "MAILHOG_HOST=${{ secrets.MAILHOG_HOST }}" >> .env
          echo "ELASTIC_HOST=${{ secrets.ELASTIC_HOST }}" >> .env
          echo "ELASTICSEARCH_PASSWORD=${{ secrets.ELASTICSEARCH_PASSWORD }}" >> .env
          echo "ELASTICSEARCH_USERNAME=${{ secrets.ELASTICSEARCH_USERNAME }}" >> .env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> .env

      - name: Build API Docker image
        run: docker compose build api

      - name: Run docker-compose
        run: docker compose up -d

      - name: Run tests with coverage
        run: |
          docker compose exec -T api coverage run manage.py test

      - name: Display coverage report
        run: |
          docker compose exec -T api coverage report

      - name: Generate coverage reports
        run: |
          docker compose exec -T api coverage html --directory=htmlcov

      - name: Copy coverage report from Docker to host
        run: |
          docker cp ebs-task-management-system-api-1:/app/htmlcov ./htmlcov

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/